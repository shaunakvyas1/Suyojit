<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- InstanceBegin template="/Templates/lvr.dwt" codeOutsideHTMLIsLocked="false" --><head>
<link rel="shortcut icon" href="http://www.janaxelson.com/favicon.ico">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Author" content="Jan Axelson">
<meta name="GENERATOR" content="">
<!-- InstanceBeginEditable name="doctitle" -->
<title>Jan Axelson's Lakeview Research</title>
<!-- InstanceEndEditable -->
<script src="Jan%20Axelson%27s%20Lakeview%20Research_files/SpryMenuBar.js" type="text/javascript"></script>
<link href="Jan%20Axelson%27s%20Lakeview%20Research_files/SpryMenuBarHorizontal.css" rel="stylesheet" type="text/css">
<link href="Jan%20Axelson%27s%20Lakeview%20Research_files/lvr.css" rel="stylesheet" type="text/css">
<!-- InstanceBeginEditable name="head" -->

<meta name="Author" content="Jan Axelson">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">

<link rel="stylesheet" href="Jan%20Axelson%27s%20Lakeview%20Research_files/lvr.css" type="text/css">

<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="fancyzoom" -->

<script src="Jan%20Axelson%27s%20Lakeview%20Research_files/FancyZoom.js" type="text/javascript"></script>
<script src="Jan%20Axelson%27s%20Lakeview%20Research_files/FancyZoomHTML.js" type="text/javascript"></script>

<!-- InstanceEndEditable -->

<!-- InstanceBeginEditable name="partnerlinks" -->
<script src="Jan%20Axelson%27s%20Lakeview%20Research_files/partnerlinks.js"></script>
<!-- InstanceEndEditable -->

</head>



<body onload="setupZoom()"><div style="position: absolute; left: 10px; top: 10px; visibility: hidden; z-index: 525;" id="ZoomSpin"><img src="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-spin-1.png" id="SpinImage"></div><div style="position: absolute; left: 10px; top: 10px; visibility: hidden; z-index: 499;" id="ZoomBox"><img style="display: block; width: 10px; height: 10px; cursor: pointer;" id="ZoomImage" src="Jan%20Axelson%27s%20Lakeview%20Research_files/spacer.gif" border="0"><div style="position: absolute; left: -15px; top: -15px; visibility: hidden;" id="ZoomClose"><img style="cursor: pointer;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/closebox.png" border="0" height="30" width="30"></div></div><div style="position: absolute; visibility: hidden; margin-left: auto; margin-right: auto; z-index: 501;" id="ZoomCapDiv"><table cellpadding="0" cellspacing="0" border="0"><tbody><tr><td align="right"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-caption-l.png" height="26" width="13"></td><td style="font-size: 14px; font-family: Helvetica; font-weight: bold; color: rgb(255, 255, 255); text-shadow: 0px 2px 4px rgb(0, 0, 0); white-space: nowrap;" id="ZoomCaption" background="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-caption-fill.png" valign="middle"></td><td><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-caption-r.png" height="26" width="13"></td></tr></tbody></table></div><div style="position: absolute; left: 50px; top: 50px; width: 100px; height: 100px; visibility: hidden; z-index: 498;" id="ShadowBox"><table cellpadding="0" cellspacing="0" border="0" height="100%" width="100%"><tbody><tr style="height: 25px;"><td style="width: 27px;"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-shadow1.png" height="25" width="27"></td><td background="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-shadow2.png"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/spacer.gif" height="1" width="1"></td><td style="width: 27px;"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-shadow3.png" height="25" width="27"></td></tr><tr><td background="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-shadow4.png"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/spacer.gif" height="1" width="1"></td><td bgcolor="#ffffff"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/spacer.gif" height="1" width="1"></td><td background="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-shadow5.png"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/spacer.gif" height="1" width="1"></td></tr><tr style="height: 26px;"><td style="width: 27px;"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-shadow6.png" height="26" width="27"></td><td background="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-shadow7.png"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/spacer.gif" height="1" width="1"></td><td style="width: 27px;"><img style="display: block;" src="Jan%20Axelson%27s%20Lakeview%20Research_files/zoom-shadow8.png" height="26" width="27"></td></tr></tbody></table></div>


<div id="container_all">

<div id="container_header">

<div id="title">

<a href="http://www.janaxelson.com/index.html"><img src="Jan%20Axelson%27s%20Lakeview%20Research_files/lvr_logo.jpg" alt="Jan Axelson's Lakeview Research" border="0" height="64" hspace="1" vspace="0" width="346"></a>

</div> <!-- title -->

<div id="search">

<form class="float_right" method="get" action="http://www.google.com/search">

<!--<div style="border:none;padding:4px; float:right;">-->
<table cellpadding="5" border="0">
<tbody><tr align="right">

<td>
<input name="q" size="30" maxlength="127" type="text">
<input value="Google Search" type="submit">
</td>
</tr>
 
<tr style="font-size:90%" align="right">
<td>
<input name="sitesearch" value="janaxelson.com" checked="checked" type="checkbox"> 
 search this site only
 </td>
</tr>
</tbody></table>
</form>  

</div> <!-- search -->

<div id="menubar_utilities">

<ul id="MenuBar1" class="MenuBarHorizontal">
  <li><a href="http://www.janaxelson.com/index.html">Home</a></li>
   <li><a tabindex="-1" href="http://www.janaxelson.com/quicklinks.htm">Site Map</a></li>
   <li><a tabindex="-1" href="http://www.janaxelson.com/ordering.htm">Buy Books</a> </li>
  <li class="last"><a tabindex="-1" href="http://www.janaxelson.com/about_lakeview_research.htm">About Lakeview Research</a> </li>
</ul>

</div> <!-- menubar_utilities -->

<div id="menubar_main">
         
<ul id="MenuBar3" class="MenuBarHorizontal">
  <li class="background"><a class="MenuBarItemSubmenu" href="http://www.janaxelson.com/usb.htm">USB&nbsp; </a>
    <ul>
      <li class="background"><a tabindex="-1" href="http://www.janaxelson.com/usb.htm">USB Main Page</a></li>
               
      <li class="background"><a tabindex="-1" href="http://www.janaxelson.com/usbchips.htm">Chips</a></li>      
      <li><a tabindex="-1" href="http://www.janaxelson.com/development_tools.htm">Development Tools</a></li>
      <li><a tabindex="-1" href="http://www.janaxelson.com/usbcode.htm">Device Code</a></li>
      <li><a tabindex="-1" href="http://www.janaxelson.com/usb_device_hardware.htm">Device Hardware</a></li>
      <li><a tabindex="-1" href="http://www.janaxelson.com/embedded_host.htm">Embedded Host &amp; OTG</a></li>
      <li><a tabindex="-1" href="http://www.janaxelson.com/usb_host_software.htm">Host Software</a></li>
      <li><a tabindex="-1" href="http://www.janaxelson.com/hidpage.htm">Human Interface Devices</a></li>
      <li><a tabindex="-1" href="http://www.janaxelson.com/mass_storage.htm">Mass Storage</a></li>
      <li><a tabindex="-1" href="http://www.janaxelson.com/winusb.htm">WinUSB</a></li>           
    </ul>
  </li>
  
  <li><a tabindex="-1" href="http://www.janaxelson.com/serport.htm">Serial Ports</a> </li>
   <li><a tabindex="-1" href="http://www.janaxelson.com/mass_storage.htm">Mass Storage</a></li>
   <li><a tabindex="-1" href="http://www.janaxelson.com/ethernet.htm">Ethernet</a></li>
   <li><a tabindex="-1" href="http://www.janaxelson.com/parport.htm">Parallel Port</a></li>
   <li><a class="" tabindex="-1" href="http://www.janaxelson.com/forum/index.php">PORTS Forum</a></li>
   <li class="last"><a class="MenuBarItemSubmenu" tabindex="-1" href="http://www.janaxelson.com/sitemap.htm">More&nbsp; </a>
     <ul>
       <li><a tabindex="-1" href="http://www.janaxelson.com/microc.htm">8052-Basic</a></li>
       <li><a tabindex="-1" href="http://www.janaxelson.com/pcbs.htm">Printed Circuit Boards</a></li>
       <li><a tabindex="-1" href="http://www.janaxelson.com/articles.htm">Articles</a></li>
       <li><a tabindex="-1" href="http://www.janaxelson.com/press.htm">News Releases</a></li>
      
     </ul>
 
</li></ul>


</div> <!-- menubar_main -->

</div> <!-- header -->




<div id="container_main">

<div id="announcement">

 
    <h2><strong>LVR.COM</strong> has moved to <strong><a href="http://janaxelson.com/">JANAXELSON.COM</a></strong></h2>
        <p><em>Please update your bookmarks and links.</em><br>
        After June 1, 2014, this site will be available ONLY at <strong><a href="http://janaxelson.com/">janaxelson.com</a></strong> and links to content at lvr.com will no longer work.</p>
 
</div> 
<!-- announcement -->

  <div id="content">
<!-- InstanceBeginEditable name="Content" -->


  <p><a href="http://www.janaxelson.com/index.html">Home</a> &gt; <a href="http://www.janaxelson.com/articles.htm">Articles</a> 
    &gt; RS-485 Circuits for All Occasions</p>
  <h1>Designing RS-485 Circuits</h1>
  <p> Jan Axelson</p>
  <p>This article was originally published in <a href="http://www.circuitcellar.com/">Circuit 
    Cellar</a>.</p>

  <p>When a network needs to transfer small blocks of information over long distances, 
    RS-485 is often the interface of choice. The network nodes can be PCs, microcontrollers, 
    or any devices capable of asynchronous serial communications. Compared to 
    Ethernet and other network interfaces, RS-485's hardware and protocol requirements 
    are simpler and cheaper.</p>
  <p>The RS-485 standard is flexible enough to allow a choice of drivers, receivers, 
    and other components depending on the cable length, data rate, number of nodes, 
    and the need to conserve power. Several vendors offer RS-485 transceivers 
    with various combinations of features. In addition, there are options for 
    methods of terminating and biasing the line and controlling the driver-enable 
    inputs.</p>
  <p>In this article, I show several circuits for RS-485 networks. Even if you 
    use prebuilt cards or converters, understanding the options will help you 
    choose the right product and configure it to get the best results for your 
    application.</p>
  <h2>RS-485 in Brief</h2>
  <p>
    But first, a quick look at RS-485. The interface popularly known as RS-485 
    is an electrical specification for multipoint systems that use balanced lines. 
    RS-485 is similar to RS-422, but RS-422 allows just one driver with multiple 
    receivers, while RS-485 supports multiple drivers and receivers.</p>
  <p>The specification document, TIA-485-A, defines the electrical characteristics 
    of the line and its drivers and receivers. There are brief suggestions relating 
    to terminations and wiring, but unlike RS-232, there's no discussion of connector 
    pinouts or software protocols.</p>
  <p>An RS-485 network can have as many as 32 unit loads, with one unit load equivalent 
    to an input impedance of 12k. By using high-impedance receivers, you can have 
    as many as 256 nodes.</p>
  <p>An RS-485 link can extend as far as 4000 ft., and can transfer data at up 
    to 10 Mbps, but not both at the same time. At 90 kbps the maximum cable length 
    is 4000 ft; at 1Mbps, it drops to 400 ft, and at 10Mbps, to 50 ft. For more 
    nodes or very long distances, you can use repeaters that regenerate the signals 
    and begin a new RS-485 line.</p>
  <p>Although the RS-485 standard says nothing about protocols, most RS-485 links 
    use the familiar asynchronous protocols supported by the UARTs in PCs and 
    other computers. A transmitted word consists of a Start bit followed by data 
    bits, an optional parity bit, and a Stop bit.</p>
  <p>Two ways to add RS-485 to a PC are on an expansion card and by attaching 
    an RS-485 converter to an existing port. Converters for RS-232 and USB are 
    available. On microcontrollers, you can connect an RS-485 transceiver to any 
    asynchronous serial port.</p>
  <p>Many network circuits also require a port bit to control each transceiver's 
    driver-enable input. Ports designed for RS-232 communications can use the 
    RTS output. If that's not available, any spare output bit will do.</p>
  <p>Most serial-communications tools, including Visual Basic's MSComm, support 
    RS-485 communications with RTS controlled in software. WCSC's <a href="http://www.wcscnet.com/">COMM-DRV</a> 
    serial-port drivers have automatic RTS control built-in.</p>
  <p>The main reason why RS-485 links can extend so far is their use of balanced, 
    or differential, signals. Two wires, usually a twisted pair, carry the signal 
    voltage and its inverse. The receiver detects the difference between the two. 
    Because most noise that couples into the wires is common to both wires, it 
    cancels out.</p>
  <p>In contrast, interfaces like RS-232 use unbalanced, or single-ended, signals. 
    The receiver detects the voltage difference between a signal voltage and a 
    common ground. The ground wire tends to be noisy because it carries the return 
    currents for all of the signals in the interface, along with whatever other 
    noise has entered the wire from other sources. And noise on the ground wire 
    can cause the receiver to misread transmitted logic levels.</p>
  <p>The chips' data sheets label the non-inverted RS-485 line as line A, and 
    the inverted line as line B. An RS-485 receiver must see a voltage difference 
    of just 200mV between A and B. If A is at least 200mV greater than B, the 
    receiver's output is a logic high. If B is at least 200mV greater than A, 
    the output is a logic low. For differences less than 200mV, the output is 
    undefined.</p>
  <p>At the driver, the voltage difference must be at least 1.5V, so the interface 
    tolerates a fair amount of non-common-mode noise and attenuation.</p>
  <p>Vendors of RS-485 transceivers include Linear Technology, Maxim, National 
    Semiconductor, and Texas Instruments. These companies are also excellent sources 
    for application notes containing circuit examples and explanations of the 
    theory behind them.</p>
  <p>RS-485 is designed to be wired in a daisy-chain, or bus, topology. Any stubs 
    that connect a node to the line should be as short as possible. Most links 
    use twisted pairs because of their ability to cancel magnetically and electromagnetically 
    coupled noise.</p>
  <h2>A General-purpose Network</h2>
  <p>Here is a node for a general-purpose RS-485 network:</p>
  <p align="center"><img src="Jan%20Axelson%27s%20Lakeview%20Research_files/rs-485_circuits_f1.gif" height="659" width="600"></p>
  <p> Each node has a Texas Instruments SN75176B transceiver that interfaces between 
    RS-485 and TTL logic levels. The chip has a 2-wire RS-485 interface, a TTL 
    driver input and receiver output, and TTL enable inputs for the driver and 
    receiver. Similar chips include Linear Technology's LTC485, Maxim's MAX485, 
    and National Semiconductor's DS3695.</p>
  <p>The circuit has two 120-ohm terminating resistors connected in parallel, 
    at or just beyond the final node at each end of the link. One end of the link 
    also has two 560-ohm biasing resistors.</p>
  <p>The terminations reduce voltage reflections that could cause the receiver 
    to misread logic levels. The receiver sees reflected voltages as an output 
    switches and the line settles from its initial current to its final current. 
    The termination eliminates reflections by making the initial and final currents 
    equal.</p>
  <p>The initial current is a function of the line's characteristic impedance, 
    which is the input impedance of an infinite, open line. The value varies with 
    the wires' diameters, the spacing between them, and type of insulation.</p>
  <p>For digital signals, which mainly consist of frequencies greater than 100 
    kHz, the characteristic impedance is mostly resistive; the inductive and capacitive 
    components are small. A typical value for AWG #24 twisted pair is 120 ohms.</p>
  <p>The final current is a function of the line termination, the receivers' input 
    impedance, and the line's series impedance. In a typical RS-485 line without 
    a termination, the initial current is greater than the final current because 
    the characteristic impedance is less than the receivers' combined input impedance.</p>
  <p>On a line without a termination, the first reflection occurs when the initial 
    current reaches the receiver. The receiver's input can absorb only a fraction 
    of the current. The rest reflects back to the driver. As the current reverses 
    direction, its magnetic field collapses and induces a voltage on the line. 
    As a result, the receiver initially sees a greater voltage than what was transmitted.</p>
  <p>When the reflected voltage reaches the driver, which has a lower impedance 
    than the line, the driver absorbs some of the reflection and bounces the rest 
    back to the receiver. This reflection is of opposite polarity to the first 
    reflection, and causes the receiver to see a reduced voltage. The reflections 
    bounce back and forth like this for a few rounds before they die out and the 
    line settles to its final current.</p>
  <p>If the line terminates with a resistor equal to the line's characteristic 
    impedance, there are no reflections. When the initial current reaches the 
    termination, it sees exactly what it was expecting: a load equal to the line's 
    characteristic impedance. The entire transmitted voltage drops across the 
    load. In a network with two parallel terminations, the drivers actually drive 
    two lines, each ending at a termination.</p>
  <p>The biasing resistors hold the line in a known state when no drivers are 
    enabled. Most RS-485 transceivers have internal biasing circuits, but adding 
    a termination defeats their ability to bias the line. A typical internal circuit 
    is a 100k pullup from line A to V+, and a 100k pulldown from line B to ground.</p>
  <p>With no termination, when no drivers are enabled, the biasing resistors hold 
    line A more positive than line B. When you add two 120-ohm terminations, the 
    difference between A and B shrinks to a few millivolts, much less than the 
    required 200mV. The solution is to add smaller resistors in parallel with 
    the internal biasing, so that a greater proportion of the series voltage drops 
    across the termination.</p>
  <p>The size of the biasing resistors is a tradeoff. For a greater voltage difference 
    and higher noise immunity on an idle line, use smaller values. For lower power 
    consumption and a greater differential voltage on a driven line, use larger 
    values.</p>
  <p>When the receiver is disabled, the receiver's output is high impedance. If 
    the output doesn't connect to a input with an internal pullup, adding a pullup 
    here will ensure that the node doesn't see false Start bits when its receiver 
    is disabled.</p>
  <p>To comply with the specification, all of the nodes must share a common ground 
    connection. This ground may be isolated from earth ground.</p>
  <p>The ground wire provides a path for the current that results from small imbalances 
    in the balanced line. If the A and B outputs balance exactly, with equal, 
    opposite currents, the two currents in the ground wire cancel each other out 
    and the wire carries no current at all. In real life, components don't balance 
    perfectly; one driver will be a little stronger, and one receiver will have 
    a slightly larger input impedance.</p>
  <p>Without a common ground, the circuit may work, but the energy due to the 
    imbalance has to go somewhere, and may dissipate as electromagnetic radiation.</p>
  <p>The RS-485 specification recommends connecting a 100-ohm resistor of at least 
    1/2 Watt in series between each node's signal ground and the network's ground 
    wire, as the circuit above shows. This way, if the ground potentials of two 
    nodes vary, the resistors will limit the current in the ground wire.</p>
  <h3>Simplified Low-power Link</h3>
  <p>Adding terminations increases a link's power consumption. With two parallel 
    120-ohm terminations and a differential output of 1.5V, the current through 
    the combined terminations is 25 mA (disregarding the effects of biasing, attenuation, 
    etc.). Without terminations, the load is the parallel combination of the receivers' 
    input impedances, and varies with the number of receivers. The maximum 32 
    unit loads have a combined parallel impedance of 375 ohms to ground or V+.</p>
  <p>For some shorter and slower links, you can save power and components by not 
    using terminating and biasing components. This is feasible if the line is 
    electrically short, which means that it behaves as a lumped, rather than distributed, 
    system. On a short line, the reflections die out long before the receiver 
    is ready to read the signal.</p>
  <p>A general guideline is that a line is short if the rise time of its signals 
    is greater than four times the signals' one-way delay. The one-way delay is 
    the amount of time needed for a signal to travel from the driver to the receiver. 
    It's a function of the line's physical length and the speed of signals in 
    the line. In copper wire, a typical speed is 2/3 the speed of light, which 
    works out to 8 inches/nsec. Cable manufacturers often specify a value for 
    products likely to be used in network wiring.</p>
  <p>The rise time is specified in the driver's data sheet. The slowest chip I've 
    found is Maxim's MAX3080, with a minimum rise time of 667 nsec. With cables 
    of up to 100 ft, the rise time is greater than four times the one-way delay 
    (4 x 150 nsec), so the line behaves as a short line and doesn't need terminating 
    or biasing.</p>
  <p>Another advantage is that the internal biasing pulls idle lines to nearly 
    V+ and ground, so you get greater noise immunity.</p>
  <p>The downside to using the MAX3080 is that the slow rise time means that it's 
    rated for use only at 115,200 bps or less.</p>
  <h3>Short-circuit protection</h3>
  <p>The previous circuits ensured that the line was in a predictable state when 
    idle or open. This circuit also protects the network as much as possible if 
    the signal lines are shorted:</p>
  <p><img src="Jan%20Axelson%27s%20Lakeview%20Research_files/rs-485_circuits_f2.gif" height="819" width="500"></p>
  <p> Instead of a single pair of biasing resistors for the entire line, the circuit 
    has four biasing resistors at each node.</p>
  <p>The circuit uses Texas Instruments' 75ALS180B transceivers, which have full-duplex 
    RS-485 inputs and outputs. The separate transmit and receive pairs enable 
    the receiver to have its own series biasing resistors. The two RS-485 lines 
    connect just beyond the biasing circuits.</p>
  <p>In this circuit, if the signal lines short together, the 1.8k series resistors 
    in combination with the 36k biasing resistors hold input A more positive than 
    B.</p>
  <p>Of course, the node can't communicate with the network if the line is open 
    or shorted, but at least it will remain in an idle state, with no false Start 
    bits, until the problem is fixed.</p>
  <p>Another way to accomplish the same thing is to use transceivers with built-in 
    fail-safe protection for open and short circuits. Chips that have this feature 
    take varying approaches.</p>
  <p>Linear Technologies' LTC1482 has a carrier-detect function that brings the 
    receiver's output high when the differential input voltage is too small to 
    be a valid logic level. The chip also has a carrier-detect output that indicates 
    when the line is in an invalid state. National Semiconductor's DS36276 also 
    has internal circuits that bring the receiver's output high if the line is 
    shorted or open.</p>
  <p>Maxim's MAX3080-89 series provide short-circuit biasing by redefining the 
    threshold for logic 0. Instead of specifying all differential inputs of less 
    than 200mV as undefined, these chips define a differential voltage of -50mV 
    or greater as a logic 0. Voltages equal to or more negative than -200mV remain 
    defined as logic 1s. The only undefined region is from -50mV to -200mV. With 
    these definitions, a shorted line, which would result in a differential input 
    of 0V, is a logic 0, which results in a high output at the receiver.</p>
  <h3>Isolated Link</h3>
  <p>The entire RS-485 network has to share a ground, but the network can be galvanically 
    isolated from other circuits the network connects to as well as from earth 
    ground. </p>
  <p>All RS-485 components must be able operate with common-mode voltages between 
    -7V and +12V. Some components have higher ratings. The common-mode voltage 
    at the receiver equals 1/2 the sum of the two signal voltages, referenced 
    to the receiver's signal ground. The voltage varies with the differential 
    signal voltages, the difference in ground potentials between the driver and 
    receiver, and noise on the line.</p>
  <p>Where the ground connection is very long, isolating the ground can ensure 
    that the components don't exceed their ratings. Isolation can also protect 
    the circuits the network connects to if the network circuits are damaged by 
    high voltage.</p>
  <p>Complete isolation requires isolating the power supplies and the network's 
    signals. The power supplies typically use transformer isolation, while the 
    signals use optoisolators:</p>
  <p align="center"><img src="Jan%20Axelson%27s%20Lakeview%20Research_files/rs-485_circuits_f3.gif" height="236" width="600"></p>
  <p>A one-chip way to achieve isolation is to use Maxim's MAX1480, which contains 
    its own transformer-isolated supply and optoisolated signal path.</p>
  <h3>Auto-switching Link</h3>
  <p>One of challenges in designing an RS-485 link is controlling the driver-enable 
    lines. Because all of the nodes share a data path, only one driver can be 
    enabled at a time. Before transmitting, a driver must be sure that the previous 
    driver has been disabled.</p>
  <p>Many RS-485 networks use a command/response protocol, where one node sends 
    commands, and the node being addressed returns a response. </p>
  <p>The UART in the node being addressed detects the final Stop bit in the middle 
    of the bit width, or slightly sooner or later if the sender's clock doesn't 
    match exactly. A very fast node may be ready to send a reply within a few 
    microseconds after detecting the Stop bit. To prevent the need for a delay 
    before responding, the sending node's driver should be disabled as soon as 
    possible after the leading edge of its final Stop bit.</p>
  <p>In most systems, the transmitting driver is enabled on the leading edge of 
    the Start bit and remains enabled for the entire transmission, then is disabled 
    as soon as possible after the final Stop bit. In the delays between transmissions, 
    biasing holds the line in an idle state.</p>
  <p>There are various ways that the transmitting node can determine when a transmission 
    has finished and it's safe to disable the driver. The node may read back what 
    it sent, or it may use a hardware or software timer to estimate the time needed 
    to transmit.</p>
  <p>This circuit shows a completely automatic way to control the enable line 
    so that the driver is disabled as quickly as possible, soon after the leading 
    edge of the Stop bit:</p>
  <p align="center"><img src="Jan%20Axelson%27s%20Lakeview%20Research_files/rs-485_circuits_f4.gif" height="556" width="506"></p>
  <p> With this circuit, the program code doesn't have to toggle a signal to enable 
    and disable the driver, and a transmitting driver doesn't need to allow extra 
    time to be sure that the previous driver has been disabled.</p>
  <p>Unlike other methods of automatic control, there are no jumpers to set for 
    a particular bit rate. I first learned of this method when I saw it in <a href="http://www.rs485.com/">R.E. 
    Smith</a>'s IRSFC24 Isolated RS-485 board.</p>
  <p>Instead of keeping the transmitter enabled for the entire transmission, the 
    circuit above enables the driver on the leading edge of the Start bit or any 
    logic low at the driver's input, and it disables the driver about 40 microseconds 
    after the leading edge of the Stop bit or any logic high at the driver's input. 
    When the driver is disabled, biasing resistors ensure that the receiver's 
    output is a logic high.</p>
  <p>The delay is generated by a 555 timer configured as a monostable (one-shot). 
    The enable inputs of the driver and receiver are tied together, so the receiver 
    is disabled when the driver transmits.</p>
  <p>The timer's output controls the transceiver's enable inputs. A falling edge 
    at Data Out indicates a Start bit and triggers the timer. The timer's output 
    goes high, enabling the driver and bringing line B more positive than line 
    A. Diode feedback to the Trig input holds the timer's output high for as long 
    as Trig remains low.</p>
  <p>When Data Out goes high, the RS-485 line switches, bringing line A more positive 
    than line B. The same logic high also causes the timer to begin timing out. 
    About 40 microseconds after the rising edge, the timer's output goes low, 
    disabling the driver. The delay ensures that the driver's RS-485 output switches 
    without delay, while the driver is enabled. When the driver is disabled, the 
    biasing components continue to hold A more positive than B.</p>
  <p>In a similar way, any falling edges in the transmitted data enable the driver, 
    and any rising edges disable the driver after the delay. On the final Stop 
    bit, the driver is disabled no later than 40 microseconds after the Stop bit's 
    leading edge.</p>
  <p>At rates of 9600 bps or less, the bit width is greater than 100 microseconds, 
    which means that the driver is disabled at around the middle of the bit width. 
    At faster bit rates, the driver will still be disabled no more than 40 microseconds 
    after the Stop bit's leading edge. For networks that need very fast response 
    time at faster bit rates, decrease R4 for a shorter delay.</p>
  <p>A downside to this circuit is that the final voltage for logic zeros is the 
    biasing voltage, which is usually less than the differential voltage when 
    the driver is enabled. But since the biasing voltage needs to be great enough 
    to prevent errors due to noise on an idle line, it should do the job for active 
    logic states as well.</p>

<!-- InstanceEndEditable -->
  </div> <!-- content -->
  
  <div id="rightside"><!-- #BeginLibraryItem "/Library/sponsored.lbi" --> <link rel="stylesheet" href="Jan%20Axelson%27s%20Lakeview%20Research_files/lvr.css" type="text/css">
<p><strong>Partner Links</strong></p>


<script language="JavaScript" type="text/javascript">
partnerlinks(); 
</script><p><a href="http://www.eltima.com/products/usb-over-ethernet/"><strong>USB to Ethernet Connector</strong></a><br>  Share &amp; access USB devices over local network or even Internet!<br><a href="http://www.eltima.com/products/usb-over-ethernet/">www.eltima.com</a></p><p><a href="http://www.mcci.com/"><strong>Tools, Drivers, Firmware</strong></a><br>  The broadest range of products and services for the USB developer.<br>  <a href="http://www.mcci.com/">mcci.com</a></p><p><strong><a href="http://www.hcc-embedded.com/"> High Quality Embedded USB</a></strong><br> Most Device/Host controllers supported. Broad range of class drivers.<br><a href="http://www.hcc-embedded.com/"> www.HCC-Embedded.com</a></p><p><strong><a href="http://www.hcc-embedded.com/"> Networking Over USB </a></strong><br> RNDIS, CDC-ECM/EEM/NCM/ACM. Pre-configured projects available.<br><a href="http://www.hcc-embedded.com/"> www.HCC-Embedded.com</a></p><p><strong><a href="http://www.absolute-software.co.uk/">Embedded Programming</a></strong><br>Experts in embedded software development. Microchip Certified Consults.<br><a href="http://www.absolute-software.co.uk/">absolute-software.co.uk</a></p><p><strong><a href="http://www.ellisys.com/">USB Protocol Analyzers</a></strong><br>ELLISYS protocol analyzers, generators, automated compliance solutions.<br><a href="http://www.ellisys.com/">www.ellisys.com</a></p><p><strong><a href="http://www.sysnucleus.com/">USBTrace - USB Analyzer</a></strong><br>Software-based USB Protocol Analyzer. Easy-to-use and affordable.<br><a href="http://www.sysnucleus.com/">www.sysnucleus.com</a></p><p><strong><a href="http://www.totalphase.com/solutions/apps/usb_analyzer_guide/?tclid=8DD6902647060BC8">Powerful USB Analyzer</a></strong><br>Real-time USB 2.0 display &amp; class decoding. See a video demo now. <br><a href="http://www.totalphase.com/solutions/apps/usb_analyzer_guide/?tclid=8DD6902647060BC8">www.totalphase.com</a></p>



<p></p><center>***</center>  <p></p>
<p>To find out about advertising on this site, please contact jan (at) janaxelson.com.
</p>
<!-- #EndLibraryItem --><!-- #BeginLibraryItem "/Library/google.lbi" -->
<p>
<script type="text/javascript"><!--
google_ad_client = "pub-9614272375919933";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_color_border = "000000";
google_color_bg = "F0F0F0";
google_color_link = "0000FF";
google_color_url = "008000";
google_color_text = "000000";
//--></script>

<script type="text/javascript" src="Jan%20Axelson%27s%20Lakeview%20Research_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:120px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:120px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" frameborder="0" height="600" width="120"></iframe></ins></ins>
</p>


<p>
<script type="text/javascript"><!--
google_ad_client = "pub-9614272375919933";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_color_border = "000000";
google_color_bg = "F0F0F0";
google_color_link = "0000FF";
google_color_url = "008000";
google_color_text = "000000";
//--></script>

<script type="text/javascript" src="Jan%20Axelson%27s%20Lakeview%20Research_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:120px;background-color:transparent"><ins id="aswift_1_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:120px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;" frameborder="0" height="600" width="120"></iframe></ins></ins>
</p><!-- #EndLibraryItem --></div>
  <!-- rightside -->
</div>
<!-- container_main -->
</div> 
<!-- container_all -->


<script type="text/javascript">
<!--
var MenuBar1 = new Spry.Widget.MenuBar("MenuBar1", {imgDown:"SpryAssets/SpryMenuBarDownHover.gif", imgRight:"SpryAssets/SpryMenuBarRightHover.gif"});
var MenuBar3 = new Spry.Widget.MenuBar("MenuBar3", {imgDown:"SpryAssets/SpryMenuBarDownHover.gif", imgRight:"SpryAssets/SpryMenuBarRightHover.gif"});
//-->
</script>



</body><!-- InstanceEnd --></html>