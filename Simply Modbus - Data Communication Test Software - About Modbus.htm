<html lang="en"><head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Simply Modbus - Data Communication Test Software - About Modbus</title>
<style>
.style1 {FONT-WEIGHT: bold; FONT-SIZE: 18px; COLOR: #000000; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif}
.style1 A:link {FONT-WEIGHT: normal; FONT-SIZE: 18px; COLOR: #0000ff; FONT-STYLE: normal; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif; TEXT-DECORATION: none}
.style1 A:visited {FONT-WEIGHT: normal; FONT-SIZE: 18px; COLOR: #7f007f; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif; TEXT-DECORATION: none}
.style1 A:hover {FONT-WEIGHT: bold; FONT-SIZE: 18px; COLOR: #ff8000; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif; TEXT-DECORATION: none}
.style1 A:active {FONT-WEIGHT: bold; FONT-SIZE: 18px; COLOR: #4290be; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif; TEXT-DECORATION: none}

.style2 {FONT-WEIGHT: bold; FONT-SIZE: 12px; COLOR: #000000; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif}
.style2 A:link {FONT-WEIGHT: normal; FONT-SIZE: 12px; COLOR: #0000ff; FONT-STYLE: normal; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif; TEXT-DECORATION: none}
.style2 A:visited {FONT-WEIGHT: normal; FONT-SIZE: 12px; COLOR: #7f007f; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif; TEXT-DECORATION: none}
.style2 A:hover {FONT-WEIGHT: bold; FONT-SIZE: 12px; COLOR: #ff8000; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif; TEXT-DECORATION: none}
.style2 A:active {FONT-WEIGHT: bold; FONT-SIZE: 12px; COLOR: #4290be; TEXT-DECORATION: none}
</style>
</head>

<!-- teal           #4290be -->
<!-- orange hover   #ff8000 -->
<!-- blue   links   #0000ff -->
<!-- purple visited #7f007f -->

<body>
<table cellpadding="0" cellspacing="0" border="0" height="250" width="1123">
	<tbody><tr>      <!-- First Table Row - White with Logo-->
		<td colspan="3" height="90" valign="top">&nbsp;&nbsp;&nbsp;&nbsp;
		   <img src="Simply%20Modbus%20-%20Data%20Communication%20Test%20Software%20-%20About%20Modbus_files/SimplyModbus.gif" alt="Simply Modbus logo" border="0" height="87" width="215"></td>
	</tr>
	
	<tr>      <!-- 2nd Table Row - Dark Blue  -->
		<td colspan="3" bgcolor="#0099FF" nowrap="nowrap"><p align="center">&nbsp;</p></td>
	</tr>

	<tr>  <!-- 3rd Table Row - 1st column (table divider)- Light Blue with buttons-->
		<td class="style1" bgcolor="#99CCFF" height="338" valign="top" width="123"><br>
          <p align="center">
          <!-- <span style="text-transform: uppercase" -->
	      <a href="http://www.simplymodbus.ca/index.html">Home</a><br><br>
	      About<br>MODBUS<br>
	      		<span class="style2">
                <a href="http://www.simplymodbus.ca/FC01.htm">fc01</a><br>
		        <a href="http://www.simplymodbus.ca/FC02.htm">fc02</a><br>
		        <a href="http://www.simplymodbus.ca/FC03.htm">fc03</a><br>
		        <a href="http://www.simplymodbus.ca/FC04.htm">fc04</a><br>
		        <a href="http://www.simplymodbus.ca/FC05.htm">fc05</a><br>
		        <a href="http://www.simplymodbus.ca/FC06.htm">fc06</a><br>
		        <a href="http://www.simplymodbus.ca/FC15.htm">fc15</a><br>
		        <a href="http://www.simplymodbus.ca/FC16.htm">fc16</a><br>
		        <a href="http://www.simplymodbus.ca/ASCII.htm">ASCII</a><br>
		        <a href="http://www.simplymodbus.ca/TCP.htm">TCP</a><br>
		        <a href="http://www.simplymodbus.ca/exceptions.htm">exceptions</a><br></span>
		        <br>
	      <a href="http://www.simplymodbus.ca/Enron.htm">About<br>Enron<br>MODBUS</a><br>
	      <!--	<span class=style2>
                <a href="enron_FC01.htm">fc01</a><br>
		        <a href="enron_FC03.htm">fc03</a><br>
		        <a href="enron_FC05.htm">fc05</a><br>
		        <a href="enron_FC06.htm">fc06</a><br>
		        <a href="enron_operator_event.htm">op event</a><br>
		        <a href="enron_alarm_event.htm">alm event</a><br>
		        <a href="enron_event_ack.htm">event ack</a><br>
		        <a href="enron_history.htm">history</a><br></span> -->
		        <br>
	      <a href="http://www.simplymodbus.ca/RTUmaster.htm">RTU Master</a><br>
	      <!--	<span class=style2>
                <a href="manual.htm">manual</a><br></span> -->
                <br>
	      <a href="http://www.simplymodbus.ca/RTUslave.htm">RTU Slave</a><br>
	      <!--	<span class=style2>
                <a href="SLAVEmanual.htm">manual</a><br></span> -->
                <br>
   	      <a href="http://www.simplymodbus.ca/TCPclient.htm">TCP Client</a><br>
	      <!--	<span class=style2>
                <a href="TCPmanual.htm">manual</a><br></span> -->
                <br>
	      <a href="http://www.simplymodbus.ca/download.htm">Download</a><br><br>
	      <a href="http://www.simplymodbus.ca/register.htm">Purchase</a><br><br>
	      <a href="http://www.simplymodbus.ca/contact.htm">Contact</a>
          </p>
        </td>
        
		<td valign="top" width="31">  <!-- 2nd Column Spacer -->
		</td> 

		<td height="338">   <!-- 3rd Column Content -->   <!-- width the rest 703-123-31=549    -->
		<p align="center">&nbsp;</p>
		<p align="center"><b><font size="5">Frequently Asked Questions</font></b></p>
		<p align="left"><a href="#Modbus"><b>What is Modbus?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#Used"><b>What is it used for?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#Work"><b>How does it work?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#Hex"><b>What is hexadecimal?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#Stored"><b>How is data stored in Standard Modbus?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#FC"><b>What is a function code?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#CRC"><b>What is a CRC?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#Command"><b>What are the formats of Modbus commands and responses?</b></a></p><a href="#Command">
		</a><p align="left"><a href="#Command"></a><a href="#Types"><b>What are data types?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#Order"><b>What is byte and word ordering?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#Map"><b>What is a Modbus Map?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#ASCII"><b>What is the difference between Modbus ASCII and Modbus RTU?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#Ext"><b>What are extended register addresses?</b></a></p><a href="#Ext">
		</a><p align="left"><a href="#Ext"></a><a href="#2Byte"><b>How does 2-byte addressing work?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#events"><b>How can you send events and historical data?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#enronmod"><b>What is Enron Modbus?</b></a><a></a></p><a>
		</a><p align="left"><a></a><a href="#else"><b>What else?</b></a><a></a></p><a>
		<p align="left">&nbsp;</p>
		
		</a><a name="Modbus"></a><p><b>What is Modbus?</b></p>
		<p>Modbus is a serial communication protocol developed by Modicon published by 
                Modicon® in 1979 for use with its programmable logic controllers (PLCs). In simple 
                terms, it is a method used for transmitting information over serial lines between electronic 
                devices. The device requesting the information is called the Modbus Master and the 
                devices supplying information are Modbus Slaves. In a standard Modbus network, there is 
                one Master and up to 247 Slaves, each with a unique Slave Address from 1 to 247. The 
                Master can also write information to the Slaves.</p>

		<p>The official Modbus specification can be found at 
                <a href="http://www.modbus-ida.org/">www.modbus-ida.org</a>.</p>
		
		<a name="Used"></a><p><b>What is it used for?</b></p>
		<p>Modbus is an open protocol, meaning that it's free for manufacturers to build into their 
                equipment without having to pay royalties. It has become a standard communications 
                protocol in industry, and is now the most commonly available means of connecting industrial 
                electronic devices. It is used widely by many manufacturers throughout many industries. 
                Modbus is typically used to transmit signals from instrumentation and control devices back 
                to a main controller or data gathering system, for example a system that measures 
                temperature and humidity and communicates the results to a computer. Modbus is often 
                used to connect a supervisory computer with a remote terminal unit (RTU) in supervisory 
                control and data acquisition (SCADA) systems. Versions of the Modbus protocol exist for 
                serial lines (Modbus RTU and Modbus ASCII) and for Ethernet (Modbus TCP).</p>
		
		<a name="Work"></a><p><b>How does it work?</b></p>
		<p>Modbus is transmitted over serial lines between devices. The simplest setup would be a 
                single serial cable connecting the serial ports on two devices, a Master and a Slave.</p><p>
		
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="Simply%20Modbus%20-%20Data%20Communication%20Test%20Software%20-%20About%20Modbus_files/DB9.gif" alt="DB9 connector" "width="202" border="0" height="112">
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="Simply%20Modbus%20-%20Data%20Communication%20Test%20Software%20-%20About%20Modbus_files/volts.gif" alt="voltage stripchart" "width="184" border="0" height="94">&gt;
 
                </p><p>The data is sent as series of ones and zeroes called bits. Each bit is sent as a voltage. 
		Zeroes are sent as positive voltages and a ones as negative. The bits are sent very quickly. 
                A typical transmission speed is 9600 baud (bits per second).</p>

		<a name="Hex"></a><p><b>What is hexadecimal?</b></p>
		<p>When troubleshooting problems, it can be helpful to see the actual raw data being 
		transmitted. Long strings of ones and zeroes are difficult to read, so the bits are combined 
                and shown in hexadecimal. Each block of 4 bits is represented by one of the sixteen 
                characters from 
		<font color="#0000FF" face="Courier New">0</font> to 
		<font color="#0000FF" face="Courier New">F</font>.</p>

		<table summary="This table shows the 16 combinations of four bits and the 
		hexadecimal characters that represent them." border="1" width="100%">
			<tbody><tr>
				<td align="center"><font face="Courier New">
				<font color="#009933">0000</font> = <font color="#0000FF">0</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">0100</font> = <font color="#0000FF">4</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">1000</font> = <font color="#0000FF">8</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">1100</font> = <font color="#0000FF">C</font></font></td>
			</tr>
			<tr>
				<td align="center"><font face="Courier New">
				<font color="#009933">0001</font> = <font color="#0000FF">1</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">0101</font> = <font color="#0000FF">5</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">1001</font> = <font color="#0000FF">9</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">1101</font> = <font color="#0000FF">D</font></font></td>
			</tr>
			<tr>
				<td align="center"><font face="Courier New">
				<font color="#009933">0010</font> = <font color="#0000FF">2</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">0110</font> = <font color="#0000FF">6</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">1010</font> = <font color="#0000FF">A</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">1110</font> = <font color="#0000FF">E</font></font></td>
			</tr>
			<tr>
				<td align="center"><font face="Courier New">
				<font color="#009933">0011</font> = <font color="#0000FF">3</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">0111</font> = <font color="#0000FF">7</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">1011</font> = <font color="#0000FF">B</font></font></td>
				<td align="center"><font face="Courier New">
				<font color="#009933">1111</font> = <font color="#0000FF">F</font></font></td>
			</tr>
		</tbody></table>

		<p>Each block of 8 bits (called a byte) is represented by one of the 256 
		character pairs from 
		<font color="#0000FF" face="Courier New">00</font> to 
		<font color="#0000FF" face="Courier New">FF</font>.</p>
		
		<a name="Stored"></a><p><b>How is data stored in Standard Modbus?</b></p>
		<p>Information is stored in the Slave device in four different tables.<br>
		Two tables store on/off discrete values (coils) and two store numerical values (registers). 
                The coils and registers each have a read-only table and read-write table.</p>
		
                <p>Each table has 9999 values.<br>
		Each coil or contact is 1 bit and assigned a data address between
		<font color="#0000FF" face="Courier New">0000</font> and 
		<font color="#0000FF" face="Courier New">270E</font>.<br>
		Each register is 1 word = 16 bits = 2 bytes and also has data address between
		<font color="#0000FF" face="Courier New">0000</font> and 
		<font color="#0000FF" face="Courier New">270E</font>.<br></p>
		
		<table summary="This table shows the 4 standard modbus tables, their address ranges, 
		whether they are read-only or read-write and their table name." border="1" width="100%">
			<tbody><tr>
				<td align="center"><p align="center"><font face="Times New Roman">Coil/Register Numbers</font></p></td>
				<td align="center"><p align="center"><font face="Times New Roman">Data Addresses</font></p></td>
				<td align="center"><font face="Times New Roman">Type</font></td>
				<td align="center"><font face="Times New Roman">Table Name</font></td>
			</tr>
			<tr>
				<td align="center"><p align="center"><font face="Times New Roman">1-9999</font></p></td>
				<td align="center"><p align="center"><font color="#0000FF" face="Courier New">0000</font> to 
				<font color="#0000FF" face="Courier New">270E</font></p></td>
				<td align="center"><font face="Times New Roman">Read-Write</font></td>
				<td align="center"><font face="Times New Roman">Discrete Output Coils</font></td>
			</tr>
			<tr>
				<td align="center"><p align="center"><font face="Times New Roman">10001-19999</font></p></td>
				<td align="center"><p align="center"><font color="#0000FF" face="Courier New">0000</font> to 
				<font color="#0000FF" face="Courier New">270E</font></p></td>
				<td align="center"><font face="Times New Roman">Read-Only</font></td>
				<td align="center"><font face="Times New Roman">Discrete Input Contacts</font></td>
			</tr>
			<tr>
				<td align="center"><p align="center"><font face="Times New Roman">30001-39999</font></p></td>
				<td align="center"><font color="#0000FF" face="Courier New">0000</font> to 
				<font color="#0000FF" face="Courier New">270E</font></td>
				<td align="center"><font face="Times New Roman">Read-Only</font></td>
				<td align="center"><font face="Times New Roman">Analog Input 
				Registers</font></td>
			</tr>
			<tr>
				<td align="center"><p align="center"><font face="Times New Roman">40001-49999</font></p></td>
				<td align="center"><font color="#0000FF" face="Courier New">0000</font> to 
				<font color="#0000FF" face="Courier New">270E</font></td>
				<td align="center"><font face="Times New Roman">Read-Write</font></td>
				<td align="center"><font face="Times New Roman">Analog Output 
				Holding Registers</font></td>
			</tr>
		</tbody></table>
		
		<p>Coil/Register Numbers can be thought of as location names since they do not 
		appear in the actual messages. The Data Addresses are used in the messages.</p>
		<p>For example, the first Holding Register, number 40001, has the Data Address
		<font color="#0000FF" face="Courier New">0000</font>.<br>
		The difference between these two values is the <b>offset</b>.<br>
		Each table has a different offset. 1, 10001, 30001 and 40001.</p>
		
		<a name="ID"></a><p><b>What is the Slave ID?</b></p>
		<p>Each slave in a network is assigned a unique unit address from 1 to 247. When the master 
                requests data, the first byte it sends is the Slave address. This way each slave knows after 
                the first byte whether or not to ignore the message. </p>
                
        <a name="FC"></a><p><b>What is a function code?</b></p>
		<p>The second byte sent by the Master is the Function code. This number tells the slave which 
                table to access and whether to read from or write to the table.</p>

		<div align="center">
		<table summary="This table shows the function codes, their action
		and the table they affect" border="1" width="90%">
			<tbody><tr>
				<td align="center"><b>Function Code</b></td>
				<td align="center"><b>Action</b></td>
				<td align="center"><b>Table Name</b></td>
			</tr>
			<tr>
				<td align="center">01 (<font color="#0000FF" face="Courier New">01</font> hex)</td>
				<td align="center">Read</td>
				<td align="center">Discrete Output Coils</td>
			</tr>
			<tr>
				<td align="center">05 (<font color="#0000FF" face="Courier New">05</font> hex)</td>
				<td align="center">Write single</td>
				<td align="center">Discrete Output Coil</td>
			</tr>
			<tr>
				<td align="center">15 (<font color="#0000FF" face="Courier New">0F</font> hex)</td>
				<td align="center">Write multiple</td>
				<td align="center">Discrete Output Coils</td>
			</tr>
			<tr>
				<td align="center">02 (<font color="#0000FF" face="Courier New">02</font> hex)</td>
				<td align="center">Read</td>
				<td align="center">Discrete Input Contacts</td>
			</tr>
			<tr>
				<td align="center">04 (<font color="#0000FF" face="Courier New">04</font> hex)</td>
				<td align="center">Read</td>
				<td align="center">Analog Input Registers</td>
			</tr>
			<tr>
				<td align="center">03 (<font color="#0000FF" face="Courier New">03</font> hex)</td>
				<td align="center">Read</td>
				<td align="center">Analog Output Holding Registers</td>
			</tr>
			<tr>
				<td align="center">06 (<font color="#0000FF" face="Courier New">06</font> hex)</td>
				<td align="center">Write single</td>
				<td align="center">Analog Output Holding Register</td>
			</tr>
			<tr>
				<td align="center">16 (<font color="#0000FF" face="Courier New">10</font> hex)</td>
				<td align="center">Write multiple</td>
				<td align="center">Analog Output Holding Registers</td>
			</tr>
		</tbody></table>		
		</div>
		
		<a name="CRC"></a><p><b>What is a CRC?</b></p>
		<p>CRC stands for Cyclic Redundancy check.&nbsp; It is two bytes added to the end of every 
                modbus message for error detection.&nbsp; Every byte in the message is used to calculate the 
                CRC. The receiving device also calculates the CRC and compares it to the CRC from the 
                sending device. If even one bit in the message is received incorrectly, the CRCs will be 
		different and an error will result. </p>
		
                <p>Here is a spreadsheet <a href="http://www.simplymodbus.ca/crc.xls">CRC calculator</a> for messages up to 16 bytes.<br>
		To download a copy, right click and select Save Target As...</p>
		
		<a name="Command"></a><p><b>What are the formats of Modbus commands and responses?</b></p>
		<p>Follow the links in this table to see examples of the requests and responses.<br></p>
		
		<table id="table1" summary="This table shows the 4 standard modbus tables 
		and which fuction codes are used to access them." border="1" width="100%">
			<tbody><tr>
				<td align="center"><font face="Times New Roman">Data Addresses</font></td>
				<td align="center"><font face="Times New Roman">Read</font></td>
				<td align="center"><font face="Times New Roman">Write Single</font></td>
				<td align="center"><font face="Times New Roman">Write Multiple</font></td>
			</tr>
			<tr>
				<td align="center"><font face="Times New Roman">Discrete Output Coils 0xxxx</font></td>
				<td align="center"><font face="Times New Roman"><a href="http://www.simplymodbus.ca/FC01.htm">FC01</a></font></td>
				<td align="center"><font face="Times New Roman"><a href="http://www.simplymodbus.ca/FC05.htm">FC05</a></font></td>
				<td align="center"><font face="Times New Roman"><a href="http://www.simplymodbus.ca/FC15.htm">FC15</a></font></td>
			</tr>
			<tr>
				<td align="center"><font face="Times New Roman">Discrete Input Contacts 1xxxx</font></td>
				<td align="center"><font face="Times New Roman"><a href="http://www.simplymodbus.ca/FC02.htm">FC02</a></font></td>
				<td align="center"><font face="Times New Roman">NA</font></td>
				<td align="center"><font face="Times New Roman">NA</font></td>
			</tr>
			<tr>
				<td align="center"><font face="Times New Roman">Analog Input Registers 3xxxx</font></td>
				<td align="center"><font face="Times New Roman"><a href="http://www.simplymodbus.ca/FC04.htm">FC04</a></font></td>
				<td align="center"><font face="Times New Roman">NA</font></td>
				<td align="center"><font face="Times New Roman">NA</font></td>
			</tr>
			<tr>
				<td align="center"><font face="Times New Roman">Analog Output Holding Registers 4xxxx</font></td>
				<td align="center"><font face="Times New Roman"><a href="http://www.simplymodbus.ca/FC03.htm">FC03</a></font></td>
				<td align="center"><font face="Times New Roman"><a href="http://www.simplymodbus.ca/FC06.htm">FC06</a></font></td>
				<td align="center"><font face="Times New Roman"><a href="http://www.simplymodbus.ca/FC16.htm">FC16</a></font></td>
			</tr>
		</tbody></table>
		
		<a name="Types"></a><p><b>What are data types?</b></p>
		<p>The example for <a href="http://www.simplymodbus.ca/FC03.htm">FC03</a> shows that register 40108 contains
		<font color="#0000FF" face="Courier New">AE41</font><br>
		which converts to the 16 bits
		<font color="#009933" face="Courier New">1010 1110 0100 0001</font> <br>
		Great! But what does it mean? Well, it could mean a few things.</p>
		
		<p>Register 40108 could be defined as any of these 16-bit data types:<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A <b>16-bit unsigned integer</b> (a whole number between 0 and 65535)<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		register 40108 contains <font color="#0000FF" face="Courier New">AE41</font> = 44,609 
		(hex to decimal conversion)</p>
		
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A <b>16-bit signed integer</b> (a whole number between -32768 and 32767)<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<font color="#0000FF" face="Courier New">AE41</font> = -20,927<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		(hex to decimal conversion that wraps, if its over 32767 then subtract 65536)</p>
		
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A <b>two character ASCII string</b> (2 typed letters)<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<font color="#0000FF" face="Courier New">AE41</font> = ® A</p>
		
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A <b>discrete on/off value</b>
		(this works the same as 16-bit integers with a value of 0 or 1.<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		The hex data would be <font color="#0000FF" face="Courier New">0000</font> 
		or <font color="#0000FF" face="Courier New">0001</font>)</p>
		
		<p>Register 40108 could also be combined with 40109 to form any of these 32-bit data types:<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A <b>32-bit unsigned integer</b> (a number between 0 and 4,294,967,295)<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 40108,40109 = 
		<font color="#0000FF" face="Courier New">AE41 5652</font> =&nbsp; 2,923,517,522</p>
		
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A <b>32-bit signed integer</b> (a number between -2,147,483,648 and 2,147,483,647)<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<font color="#0000FF" face="Courier New">AE41 5652</font> = -1,371,449,774</p>
		
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A <b>32-bit single precision IEEE floating point number</b>.<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This is a mathematical formula that allows any real number (a number with decimal<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; points) to represented by 32 bits with an accuracy of about seven digits.<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<font color="#0000FF" face="Courier New">AE41 5652</font> = -4.395978 E-11</p>
		
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Here is a spreadsheet
		<a href="http://www.simplymodbus.ca/ieeefloats.xls">IEEE float calculator</a> for inputs of 4 bytes or 2 words.<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To download a copy, right click and select Save Target As...</p>
		
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A <b>four character ASCII string</b> (4 typed letters)<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<font color="#0000FF" face="Courier New">AE41 5652</font> = ® A V R</p>
		
		<p>More registers can be combined to form longer ASCII strings.&nbsp; 
		Each register being used to store two ASCII characters (two bytes).</p>
		
		<a name="Order"></a><p><b>What is byte and word ordering?</b></p>
		<p>The Modbus specification doesn't define exactly how the data is 
		stored in the registers. Therefore, some manufacturers implemented 
		modbus in their equipment to store and transmit the higher byte first 
		followed by the lower byte. (<font color="#0000FF" face="Courier New">AE</font> 
		before <font color="#0000FF" face="Courier New">41</font>).<br>
		Alternatively, others store and transmit the lower byte first (<font color="#0000FF" face="Courier New">41</font> 
		before <font color="#0000FF" face="Courier New">AE</font>).</p>
		
		<p>Similarly, when registers are combined to represent 32-bit data 
		types, Some devices store the higher 16 bits (high word) in the first 
		register and the remaining low word in the second (<font color="#0000FF" face="Courier New">AE41</font> 
		before <font color="#0000FF" face="Courier New">5652</font>) while 
		others do the opposite (<font color="#0000FF" face="Courier New">5652</font> 
		before <font color="#0000FF" face="Courier New">AE41</font>)</p>
		
		<p>It doesn't matter which order the bytes or words are sent in, as long as the receiving device knows which way to expect it.</p>
		
		<p>For example, if the number 29,235,175,522 was to be sent as a 32 
bit unsigned integer, it could be arranged any of these four ways.</p>
		
		<p> <font color="#0000FF" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp; AE41 5652</font>
		<font face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; high byte first&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; high word first</font><br>
		<font color="#0000FF" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp; 5652 AE41</font>
		<font face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; high byte first&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; low word first</font><br>
		<font color="#0000FF" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp; 41AE 5256</font>
		<font face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; low byte first&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; high word first</font><br>
		<font color="#0000FF" face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp; 5256 41AE</font>
		<font face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; low byte first&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; low word first</font></p>
		
		<a name="Map"></a><p><b>What is a Modbus Map?</b></p>
		<p>A modbus map is simply a list for an individual slave device that defines<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - what the data is (eg. pressure or temperature readings)<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 
where the data is stored (which tables and data addresses)<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 
how the data is stored (data types, byte and word ordering)</p>
		<p>Some devices are built with a fixed map that is defined by the manufacturer. 
		While other devices allow the operator to configure or program a custom map to fit their needs.</p>
		
		<a name="ASCII"></a><p><b>What is the difference between Modbus ASCII and Modbus RTU?</b></p>
		<p>The difference between these two modes is explained
		<a href="http://www.simplymodbus.ca/ASCII.htm">here</a>.</p>
		
		<a name="Ext"></a><p><b>What are extended register addresses?</b></p>
		<p>Since the range of the analog output holding registers is 40001 to 
		49999, it implies that there cannot be more than 9999 registers. 
		Although this is usually enough for most applications, there are cases 
		where more registers would be beneficial.</p>
		
		<p>Registers 40001 to 49999 correspond to data addresses
		<font color="#0000FF" face="Courier New">0000</font> to
		<font color="#0000FF" face="Courier New">270E</font>.&nbsp;&nbsp; If we utilize the remaining data addresses
		<font color="#0000FF" face="Courier New">270F</font> to
		<font color="#0000FF" face="Courier New">FFFF</font>, over six times as many registers can be available, 65536 in total.&nbsp; 
		This would correspond to register numbers from 40001 to 105536.</p>
		
		<p>Many modbus software drivers (for Master PCs) were written with the 40001 to 49999
		limits and cannot access extended registers in slave devices. And many slave devices do
		not support maps using the extended registers. But on the other hand, some slave devices
		do support these registers and some Master software can access it, especially if custom
		software is written.</p>
		
		<a name="ADU"></a>
		
		<a name="2Byte"></a><p><b>How does 2-byte slave addressing work?</b></p>
		<p>Since a single byte is normally used to define the slave address and each slave on a
		network requires a unique address, the number of slaves on a network is limited to 256.
		The limit defined in the modbus specification is even lower at 247.</p>
		
		<p>To get beyond this limit, a modification can be made to the protocol to use two bytes for
		the address. The master and the slaves would all be required to support this modification. 
		Two byte addressing extends the limit on the number of slaves in a network to 65535.</p>
		
		<p>By default, the Simply Modbus software uses 1 byte addressing. When an address greater
		than 255 is entered, the software automatically switches to 2 byte addressing and stays in
		this mode for all addresses until the 2 byte addressing is manually turned off.</p>
		
		<a name="events"></a><p><b>How can you send events and historical data?</b></p>
		<p><a href="http://www.simplymodbus.ca/Enron.htm">Enron Modbus</a> includes commands for moving events and historical data..</p>
		
		<a name="enronmod"></a><p><b>What is Enron Modbus?</b></p>
		<p>Enron Modbus is a modification to the standard Modicon modbus communication protocol developed by Enron Corporation.</p>
		<p>See <a href="http://www.simplymodbus.ca/Enron.htm">Enron Modbus</a> for details.</p>
		
		<a name="else"></a><p><b>What else?</b></p>
		<p>If you read this page, We would love to hear your comments.&nbsp; Please send an email to 
		<a href="mailto:info@simplymodbus.ca?subject=Simply%20Modbus%20Info%20Request">info@simplymodbus.ca</a>
		and let us know what you found helpful and what topics we could add, expand or clarify.</p>
		
		  <p align="center">
		    <a href="http://www.simplymodbus.ca/index.html">Home</a> 
		    FAQ  
		    <a href="http://www.simplymodbus.ca/Enron.htm">Enron</a> 
		    <a href="http://www.simplymodbus.ca/download.htm">Download</a>   
		    <a href="http://www.simplymodbus.ca/register.htm">Purchase</a> 
		    <a href="http://www.simplymodbus.ca/contact.htm">Contact</a>
		  </p>
	
          <div class="centre"><p align="center"><font size="2">Copyright © 2013 Simply Modbus. All rights reserved</font></p></div>

		</td>
		
				<td valign="top" width="30">  <!-- 4th Column Spacer -->
		</td>
		
		<td height="338" valign="top" width="400">   <!-- 5th Column Google Content -->
		<p align="center">&nbsp;</p>
		<p align="center">&nbsp;</p> <!-- square corners -->
		
			<script type="text/javascript"><!--
			google_ad_client = "pub-8766745863199726";
			/* 160x600, created 2/4/11 */
			google_ad_slot = "1678574716";
			google_ad_width = 160;
			google_ad_height = 600;
			//-->
			</script>
			<script type="text/javascript" src="Simply%20Modbus%20-%20Data%20Communication%20Test%20Software%20-%20About%20Modbus_files/show_ads.js">
			</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" frameborder="0" height="600" width="160"></iframe></ins></ins>

		<p align="center">&nbsp;</p>
		<p align="center">&nbsp;</p>  <!-- square corners -->
		
			<script type="text/javascript"><!--
			google_ad_client = "pub-8766745863199726";
			/* 160x600, created 2/4/11 */
			google_ad_slot = "5998979711";
			google_ad_width = 160;
			google_ad_height = 600;
			//-->
			</script>
			<script type="text/javascript" src="Simply%20Modbus%20-%20Data%20Communication%20Test%20Software%20-%20About%20Modbus_files/show_ads.js">
			</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><ins id="aswift_1_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;" frameborder="0" height="600" width="160"></iframe></ins></ins>


		<p align="center">&nbsp;</p>
		<p align="center">&nbsp;</p>  <!-- slighly rounded corners -->
		
			<script type="text/javascript"><!--
			google_ad_client = "pub-8766745863199726";
			/* 160x600, created 2/4/11 */
			google_ad_slot = "1150364648";
			google_ad_width = 160;
			google_ad_height = 600;
			//-->
		        </script>
			<script type="text/javascript" src="Simply%20Modbus%20-%20Data%20Communication%20Test%20Software%20-%20About%20Modbus_files/show_ads.js">
			</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><ins id="aswift_2_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;" frameborder="0" height="600" width="160"></iframe></ins></ins> 
		</td>	
		
		
		
		
    </tr>
</tbody></table>



</body></html>